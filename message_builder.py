import re
from models import Task
from task_analyzer import analyze_task_text

def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞—á–∏.
    """
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è '-'
    escaped = re.sub(r'([\\_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)

    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '-', —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    if escaped.startswith('-'):
        escaped = '\\' + escaped

    return escaped


def format_notification_message(task: Task, notif_type: str, minutes_delta: int) -> str:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if notif_type.startswith("before"):
        prefix = f"in ‚¨áÔ∏è{minutes_delta}m"
    elif notif_type.startswith("overdue"):
        prefix = f"over‚ö†Ô∏è{minutes_delta}m"
    elif notif_type.startswith("during"):
        prefix = "‚è≥ Now"
    else:
        prefix = ""

    # –†–∞–∑–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
    info = analyze_task_text(task)
    raw_text = info["cleaned_text"]
    emoji = info["priority_emoji"]

    # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º—è —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º ‚Äî –¥–ª—è MarkdownV2
    safe_text = escape_markdown_v2(raw_text)
    safe_time = escape_markdown_v2(info["time_range"])

    # –ò–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    from pathlib import Path
    stem = Path(task.file_path).stem
    safe_date = escape_markdown_v2(stem)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    title_line = f"{emoji} {safe_text}" if info["has_priority"] else safe_text
    return f"`{prefix}`\n\nüïí {safe_time}\n\nüîî {title_line}\n\n`{safe_date}`"

