import re
from pathlib import Path
from models import Task
from parser import parse_task_lines

# === –≠–º–æ–¥–∂–∏, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ ===
PRIORITY_ICONS = ["‚è´", "‚è¨", "üî∫", "üîº", "üîΩ"]

def analyze_task_text(task: Task) -> dict:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
    - cleaned_text: —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    - has_priority: –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∑–Ω–∞—á–æ–∫
    - priority_emoji: –∫–∞–∫–æ–π –∑–Ω–∞—á–æ–∫ –Ω–∞–π–¥–µ–Ω (–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç)
    - time_range: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
    """
    raw_text = task.text

    # –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    priority_match = re.search(r"[" + "".join(PRIORITY_ICONS) + r"]", raw_text)
    has_priority = bool(priority_match)
    priority_emoji = priority_match.group(0) if has_priority else "‚è´"  # –¥–µ—Ñ–æ–ª—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞

    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    cleaned_text = raw_text
    cleaned_text = re.sub(r"[" + "".join(PRIORITY_ICONS) + r"]", "", cleaned_text)
    cleaned_text = re.sub(r"\[startTime::.*?\]", "", cleaned_text)
    cleaned_text = re.sub(r"\[endTime::.*?\]", "", cleaned_text)
    cleaned_text = cleaned_text.strip()

    return {
        "cleaned_text": cleaned_text,
        "has_priority": has_priority,
        "priority_emoji": priority_emoji,
        "time_range": task.get_time_range()
    }


def format_task_for_telegram(task: Task, prefix: str = "") -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Markdown-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:
    - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "in ‚¨áÔ∏è2m\n\n")
    - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ üïí
    - –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª)
    """
    info = analyze_task_text(task)

    # –°–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    title_line = f"{info['priority_emoji']} {info['cleaned_text']}" if info["has_priority"] else info["cleaned_text"]

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    message = f"{prefix}üïí *{info['time_range']}*\n\nüîî {title_line}"
    return message


def load_tasks_from_folder(folder_path: str) -> list[Task]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Å–µ—Ö Markdown-—Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    """
    path = Path(folder_path)
    if not path.exists() or not path.is_dir():
        raise ValueError(f"Invalid folder path: {folder_path}")

    all_tasks = []
    for file_path in path.glob("*.md"):
        all_tasks.extend(parse_task_lines(str(file_path)))
    return all_tasks
